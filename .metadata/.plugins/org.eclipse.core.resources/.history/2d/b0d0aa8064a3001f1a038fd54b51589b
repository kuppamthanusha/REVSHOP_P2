package com.revshop.cartservice.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.revshop.cartservice.entity.Cart;
import com.revshop.cartservice.entity.Product;
import com.revshop.cartservice.entity.UserModel;
import com.revshop.cartservice.service.CartService;

public class TestCartController {

	@InjectMocks
	private CartController cartController;
	
	@Mock
	private CartService cartService;
	
	
	@BeforeEach
	public void setup() {
		MockitoAnnotations.openMocks(this);
	}
	
	@Test
	public void getCartItems_ReturnsBadRequest() {
		
		int userId = 1;
		UserModel userModel = new UserModel();
		userModel.setUserId(userId);
		
		when(cartService.getCartItemsByuserModel(userModel)).thenReturn(null);
		
		ResponseEntity<?> response = cartController.showCartPage(userModel);
		
		assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
	}
	
	@Test
	public void getCartItems_ReturnsOk() {
		
		int userId = 1;
		UserModel userModel = new UserModel();
		userModel.setUserId(userId);
		
		List<Cart> cartItems = new ArrayList<>();
		
		when(cartService.getCartItemsByuserModel(userModel)).thenReturn(cartItems);
		
		ResponseEntity<?> response = cartController.showCartPage(userModel);
		
		assertEquals(HttpStatus.OK, response.getStatusCode());
	}
	
	@Test
	public void addToCart_ReturnsOk() {
		Cart cart = new Cart();
		int userId = 1;
		int productId = 1;
		
		UserModel userModel = new UserModel();
		userModel.setUserId(userId);
		
		Product product = new Product();
		product.setProductId(productId);
		
		cart.setUser(userModel);
		cart.setProduct(product);
		
		when(cartService.addToCart(cart)).thenReturn(cart);
		ResponseEntity<?> response = cartController.addToCart(cart);
		assertEquals(HttpStatus.OK, response.getStatusCode());
	}
	
	@Test
	public void addToCart_ReturnsBadRequest() {
		Cart cart = new Cart();
		int userId = 1;
		int productId = 1;
		
		UserModel userModel = new UserModel();
		userModel.setUserId(userId);
		
		Product product = new Product();
		product.setProductId(productId);
		
		cart.setUser(userModel);
		cart.setProduct(product);
		
		when(cartService.addToCart(cart)).thenReturn(null);
		ResponseEntity<?> response = cartController.addToCart(cart);
		assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
	}
	
	@Test
	public void updateCart_ReturnsOk() {
		Cart cart = new Cart();
		int userId = 1;
		int productId = 1;
		int quantity = 5;
		
		when(cartService.findByUserAndProduct(userId, productId)).thenReturn(cart);
		when(cartService.updateCart(cart)).thenReturn(cart);
		ResponseEntity<?> response = cartController.updateQuantity(productId, userId, quantity);
		assertEquals(HttpStatus.OK, response.getStatusCode());
	}
	
	@Test
	public void updateCart_ReturnsBadRequest() {
		Cart cart = new Cart();
		int userId = 1;
		int productId = 1;
		int quantity = 5;
		
		when(cartService.findByUserAndProduct(userId, productId)).thenReturn(cart);
		when(cartService.updateCart(cart)).thenReturn(cart);
		ResponseEntity<?> response = cartController.updateQuantity(productId, userId, quantity);
		assertEquals(HttpStatus.OK, response.getStatusCode());
	}
	
	@Test
	public void updateCart_ReturnsCartNotFound() {
		int userId = 1;
		int productId = 1;
		int quantity = 5;
		
		when(cartService.findByUserAndProduct(userId, productId)).thenReturn(null);
		ResponseEntity<?> response = cartController.updateQuantity(productId, userId, quantity);
		assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
	}
	
}
